# YOLOv5 🚀 by Ultralytics, AGPL-3.0 license

# Parameters
nc: 80  # 类别数量

# 模型深度&宽度
depth_multiple: 0.33  # 控制子模块数量=int(number*depth)
width_multiple: 0.50  # 控制卷积核的数量=int(number*width)

#该 anchor 尺寸是为输入图像640×640分辨率预设的，实现了即可以在小特征图（feature map）上检测大目标，也可以在大特征图上检测小目标。
anchors:
  - [10,13, 16,30, 33,23]  # P3/8       - 检测小目标，10,13是一组尺寸，总共三组检测小目标
  - [30,61, 62,45, 59,119]  # P4/16     - 检测中目标，共三组
  - [116,90, 156,198, 373,326]  # P5/32 - 检测大目标，共三组


# YOLOv5 v6.0 backbone
backbone:
  
  # [from, number, module, args]
  # from ：输入来自那一层，-1代表上一次，1代表第1层，3代表第3层
  # number ：模块的数量，最终数量需要乘 width ，然后四舍五入取整，如果小于1，取1。
  # module ：子模块名
  # args ：模块参数， channel,kernel_size,stride,padding,bias 等

  [[-1, 1, Conv, [64, 6, 2, 2]],  # 0-P1/2
   [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4
   [-1, 3, C3, [128]],
   [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8
   [-1, 6, C3, [256]],
   [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16
   [-1, 9, C3, [512]],
   [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32
   [-1, 3, C3, [1024]],
   [-1, 1, SPPF, [1024, 5]],  # 9
  ]



# YOLOv5中的 Head 包括 Neck 和 Detect_head 两部分。 Neck 采用了 PANet 机构，Detect 结构和YOLOv3中的 Head 一样。
# 其中 BottleNeckCSP 带有False，说明没有使用残差结构，而是采用的 backbone 中的 Conv 。

# YOLOv5 v6.0 head
head:
  [

   # Neck 部分
   [-1, 1, Conv, [512, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],      #上采样
   [[-1, 6], 1, Concat, [1]],  # cat backbone P4    #代表 concat 上一层和第6层
   [-1, 3, C3, [512, False]],  # 13                 #说明该层是第13层网络

   [-1, 1, Conv, [256, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 4], 1, Concat, [1]],  # cat backbone P3
   [-1, 3, C3, [256, False]],  # 17 (P3/8-small)

   [-1, 1, Conv, [256, 3, 2]],
   [[-1, 14], 1, Concat, [1]],  # cat head P4
   [-1, 3, C3, [512, False]],  # 20 (P4/16-medium)

   [-1, 1, Conv, [512, 3, 2]],
   [[-1, 10], 1, Concat, [1]],  # cat head P5
   [-1, 3, C3, [1024, False]],  # 23 (P5/32-large)

   # Detect_head
   [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)  #说明输入来自第17,20,23层
  ]
